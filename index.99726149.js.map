{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static INITIAL_STATE = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    constructor(initialState = $a5fd07fa01589658$var$Game.INITIAL_STATE){\n        this.board = initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        const oldBoard = JSON.stringify(this.board);\n        for(let r = 0; r < this.board.length; r++){\n            let row = this.board[r];\n            row = this.stack(row);\n            row = this.merge(row);\n            row = this.stack(row);\n            this.board[r] = row;\n        }\n        const newBoard = JSON.stringify(this.board);\n        if (oldBoard === newBoard) return;\n        this.checkWin();\n        this.addRandomCell();\n        this.checkGameOver();\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        const oldBoard = JSON.stringify(this.board);\n        for(let r = 0; r < this.board.length; r++){\n            let row = this.board[r];\n            row = row.reverse();\n            row = this.stack(row);\n            row = this.merge(row);\n            row = this.stack(row);\n            row = row.reverse();\n            this.board[r] = row;\n        }\n        const newBoard = JSON.stringify(this.board);\n        if (oldBoard === newBoard) return;\n        this.checkWin();\n        this.addRandomCell();\n        this.checkGameOver();\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        const oldBoard = JSON.stringify(this.board);\n        for(let c = 0; c < this.board.length; c++){\n            let col = this.board.map((r)=>r[c]);\n            col = this.stack(col);\n            col = this.merge(col);\n            col = this.stack(col);\n            this.updateColumn(c, col);\n        }\n        const newBoard = JSON.stringify(this.board);\n        if (oldBoard === newBoard) return;\n        this.checkWin();\n        this.addRandomCell();\n        this.checkGameOver();\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        const oldBoard = JSON.stringify(this.board);\n        for(let c = 0; c < this.board.length; c++){\n            let col = this.board.map((r)=>r[c]);\n            col = col.reverse();\n            col = this.stack(col);\n            col = this.merge(col);\n            col = this.stack(col);\n            col = col.reverse();\n            this.updateColumn(c, col);\n        }\n        const newBoard = JSON.stringify(this.board);\n        if (oldBoard === newBoard) return;\n        this.checkWin();\n        this.addRandomCell();\n        this.checkGameOver();\n    }\n    updateColumn(c, col) {\n        for(let r = 0; r < this.board.length; r++)this.board[r][c] = col[r];\n    }\n    filterZero(arr) {\n        return arr.filter((num)=>num !== 0);\n    }\n    stack(arr) {\n        const newArr = this.filterZero(arr);\n        while(newArr.length < this.board.length)newArr.push(0);\n        return newArr;\n    }\n    merge(arr) {\n        for(let i = 0; i < arr.length - 1; i++)if (arr[i] === arr[i + 1] && arr[i] !== 0) {\n            arr[i] *= 2;\n            arr[i + 1] = 0;\n            this.score += arr[i];\n        }\n        return arr;\n    }\n    checkWin() {\n        if (this.board.flat().includes(2048)) this.status = \"win\";\n    }\n    checkGameOver() {\n        if (this.board.flat().includes(0)) return;\n        if (!this.checkHorizontal() && !this.checkVertical()) this.status = \"lose\";\n    }\n    checkHorizontal() {\n        for(let r = 0; r < this.board.length; r++)for(let c = 0; c < this.board.length - 1; c++){\n            if (this.board[r][c] === this.board[r][c + 1]) return true;\n        }\n        return false;\n    }\n    checkVertical() {\n        for(let r = 0; r < this.board.length - 1; r++)for(let c = 0; c < this.board.length; c++){\n            if (this.board[r][c] === this.board[r + 1][c]) return true;\n        }\n        return false;\n    }\n    addRandomCell() {\n        const emptyCells = this.board.reduce((acc, currentRow, rowIndex)=>{\n            currentRow.forEach((cell, colIndex)=>{\n                if (cell === 0) acc.push([\n                    rowIndex,\n                    colIndex\n                ]);\n            });\n            return acc;\n        }, []);\n        if (emptyCells.length === 0) return;\n        const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n        this.addRandomCell();\n        this.addRandomCell();\n    }\n    restart() {\n        this.board = $a5fd07fa01589658$var$Game.INITIAL_STATE.map((row)=>[\n                ...row\n            ]);\n        this.status = \"idle\";\n        this.score = 0;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$scoreContainer = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message.message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message.message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message.message-lose\");\nconst $09e991522ca7e64e$var$updateUI = ()=>{\n    const state = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$cells.forEach((cell, i)=>{\n        const row = Math.floor(i / 4);\n        const col = i % 4;\n        const cellValue = state[row][col];\n        if (cell.textContent !== cellValue.toString()) {\n            cell.textContent = cellValue === 0 ? \"\" : cellValue;\n            cell.className = `field-cell field-cell--${cellValue}`;\n        }\n    });\n    $09e991522ca7e64e$var$scoreContainer.textContent = $09e991522ca7e64e$var$game.getScore();\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case \"win\":\n            $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n            $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n            $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n            break;\n        case \"playing\":\n            $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n            break;\n        default:\n            $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n    }\n};\nconst $09e991522ca7e64e$var$handleMove = (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    e.preventDefault();\n    $09e991522ca7e64e$var$updateUI();\n};\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") {\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$game.start();\n    } else {\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n        $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$game.restart();\n    }\n    $09e991522ca7e64e$var$updateUI();\n});\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleMove);\n$09e991522ca7e64e$var$updateUI();\n\n\n//# sourceMappingURL=index.99726149.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst cells = document.querySelectorAll('.field-cell');\nconst scoreContainer = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button.start');\nconst messageStart = document.querySelector('.message.message-start');\nconst messageWin = document.querySelector('.message.message-win');\nconst messageLose = document.querySelector('.message.message-lose');\n\nconst updateUI = () => {\n  const state = game.getState();\n\n  cells.forEach((cell, i) => {\n    const row = Math.floor(i / 4);\n    const col = i % 4;\n    const cellValue = state[row][col];\n\n    if (cell.textContent !== cellValue.toString()) {\n      cell.textContent = cellValue === 0 ? '' : cellValue;\n      cell.className = `field-cell field-cell--${cellValue}`;\n    }\n  });\n\n  scoreContainer.textContent = game.getScore();\n\n  switch (game.getStatus()) {\n    case 'win':\n      messageWin.classList.remove('hidden');\n      messageLose.classList.add('hidden');\n      messageStart.classList.add('hidden');\n      break;\n\n    case 'lose':\n      messageLose.classList.remove('hidden');\n      messageWin.classList.add('hidden');\n      messageStart.classList.add('hidden');\n      break;\n\n    case 'playing':\n      messageLose.classList.add('hidden');\n      messageWin.classList.add('hidden');\n      messageStart.classList.add('hidden');\n      break;\n\n    default:\n      messageLose.classList.add('hidden');\n      messageWin.classList.add('hidden');\n      messageStart.classList.remove('hidden');\n  }\n};\n\nconst handleMove = (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n\n    default:\n      return;\n  }\n  e.preventDefault();\n\n  updateUI();\n};\n\nstartButton.addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    startButton.textContent = 'Restart';\n    startButton.classList.add('restart');\n    startButton.classList.remove('start');\n    game.start();\n  } else {\n    startButton.textContent = 'Start';\n    startButton.classList.add('start');\n    startButton.classList.remove('restart');\n    game.restart();\n  }\n\n  updateUI();\n});\n\ndocument.addEventListener('keydown', handleMove);\n\nupdateUI();\n","'use strict';\n\nclass Game {\n  static INITIAL_STATE = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  constructor(initialState = Game.INITIAL_STATE) {\n    this.board = initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const oldBoard = JSON.stringify(this.board);\n\n    for (let r = 0; r < this.board.length; r++) {\n      let row = this.board[r];\n\n      row = this.stack(row);\n      row = this.merge(row);\n      row = this.stack(row);\n      this.board[r] = row;\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (oldBoard === newBoard) {\n      return;\n    }\n\n    this.checkWin();\n    this.addRandomCell();\n    this.checkGameOver();\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const oldBoard = JSON.stringify(this.board);\n\n    for (let r = 0; r < this.board.length; r++) {\n      let row = this.board[r];\n\n      row = row.reverse();\n      row = this.stack(row);\n      row = this.merge(row);\n      row = this.stack(row);\n      row = row.reverse();\n      this.board[r] = row;\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (oldBoard === newBoard) {\n      return;\n    }\n\n    this.checkWin();\n    this.addRandomCell();\n    this.checkGameOver();\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const oldBoard = JSON.stringify(this.board);\n\n    for (let c = 0; c < this.board.length; c++) {\n      let col = this.board.map((r) => r[c]);\n\n      col = this.stack(col);\n      col = this.merge(col);\n      col = this.stack(col);\n      this.updateColumn(c, col);\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (oldBoard === newBoard) {\n      return;\n    }\n\n    this.checkWin();\n    this.addRandomCell();\n    this.checkGameOver();\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const oldBoard = JSON.stringify(this.board);\n\n    for (let c = 0; c < this.board.length; c++) {\n      let col = this.board.map((r) => r[c]);\n\n      col = col.reverse();\n      col = this.stack(col);\n      col = this.merge(col);\n      col = this.stack(col);\n      col = col.reverse();\n      this.updateColumn(c, col);\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (oldBoard === newBoard) {\n      return;\n    }\n\n    this.checkWin();\n    this.addRandomCell();\n    this.checkGameOver();\n  }\n\n  updateColumn(c, col) {\n    for (let r = 0; r < this.board.length; r++) {\n      this.board[r][c] = col[r];\n    }\n  }\n\n  filterZero(arr) {\n    return arr.filter((num) => num !== 0);\n  }\n\n  stack(arr) {\n    const newArr = this.filterZero(arr);\n\n    while (newArr.length < this.board.length) {\n      newArr.push(0);\n    }\n\n    return newArr;\n  }\n\n  merge(arr) {\n    for (let i = 0; i < arr.length - 1; i++) {\n      if (arr[i] === arr[i + 1] && arr[i] !== 0) {\n        arr[i] *= 2;\n        arr[i + 1] = 0;\n        this.score += arr[i];\n      }\n    }\n\n    return arr;\n  }\n\n  checkWin() {\n    if (this.board.flat().includes(2048)) {\n      this.status = 'win';\n    }\n  }\n\n  checkGameOver() {\n    if (this.board.flat().includes(0)) {\n      return;\n    }\n\n    if (!this.checkHorizontal() && !this.checkVertical()) {\n      this.status = 'lose';\n    }\n  }\n\n  checkHorizontal() {\n    for (let r = 0; r < this.board.length; r++) {\n      for (let c = 0; c < this.board.length - 1; c++) {\n        if (this.board[r][c] === this.board[r][c + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkVertical() {\n    for (let r = 0; r < this.board.length - 1; r++) {\n      for (let c = 0; c < this.board.length; c++) {\n        if (this.board[r][c] === this.board[r + 1][c]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  addRandomCell() {\n    const emptyCells = this.board.reduce((acc, currentRow, rowIndex) => {\n      currentRow.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          acc.push([rowIndex, colIndex]);\n        }\n      });\n\n      return acc;\n    }, []);\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const [row, col] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addRandomCell();\n    this.addRandomCell();\n  }\n\n  restart() {\n    this.board = Game.INITIAL_STATE.map((row) => [...row]);\n    this.status = 'idle';\n    this.score = 0;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$Game","INITIAL_STATE","constructor","initialState","board","map","row","score","status","moveLeft","oldBoard","JSON","stringify","r","length","stack","merge","checkWin","addRandomCell","checkGameOver","moveRight","reverse","moveUp","c","col","updateColumn","moveDown","filterZero","arr","filter","num","newArr","push","i","flat","includes","checkHorizontal","checkVertical","emptyCells","reduce","acc","currentRow","rowIndex","forEach","cell","colIndex","Math","floor","random","getScore","getState","getStatus","start","restart","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$cells","document","querySelectorAll","$09e991522ca7e64e$var$scoreContainer","querySelector","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$updateUI","state","cellValue","textContent","toString","className","classList","remove","add","addEventListener","e","key","preventDefault"],"version":3,"file":"index.99726149.js.map"}